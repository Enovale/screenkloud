language: cpp

matrix:
  include:
    - name: "Linux (gcc)" 
      os: linux
      dist: trusty
      sudo: required
      compiler: gcc
      services:
        - docker
      env: 
        - CMAKE_BUILD_TYPE: Release 
        - QT_PPA: beineri/opt-qt562-trusty
        - QT_VER: 56
    - name: "macOS (xcode 9.4)"
      os: osx
      osx_image: xcode9.4
      env: 
        - CMAKE_BUILD_TYPE: Release
    - name: Windows (VS2017 Win32)
      os: windows
      env:
        - PLATFORM: Win32
        - CMAKE_BUILD_TYPE: Release
        - PYTHON_BASE_DIR: "'/c/Python37'"
        - PYTHON_PACKAGE: "'python3 --version 3.7.0 --forcex86'"
        - QT5_BASE_DIR: "'/c/Qt/5.12.3/msvc2017'"
        - WIX_PATH: "'/c/Program Files (x86)/WiX Toolset v3.11/bin'"
        - MSBUILD_PATH: "'/c/Program Files (x86)/Microsoft Visual Studio/2017/BuildTools/MSBuild/15.0/Bin'"
        - OPENSSL_VERSION: 1.0.2s
        - OPENSSL_URL: "'https://www.openssl.org/source/openssl-1.0.2s.tar.gz'"
        - OPENSSL_BIN_URL: "'https://indy.fulgan.com/SSL/openssl-1.0.2s-i386-win32.zip'"
    - name: Windows (VS2017 x64)
      os: windows
      env:
        - PLATFORM: x64
        - CMAKE_BUILD_TYPE: Release 
        - PYTHON_BASE_DIR: "'/c/Python37'"
        - PYTHON_PACKAGE: "'python3 --version 3.7.0'"
        - QT5_BASE_DIR: "'/c/Qt/5.12.3/msvc2017_64'"
        - WIX_PATH: "'/c/Program Files (x86)/WiX Toolset v3.11/bin'"
        - MSBUILD_PATH: "'/c/Program Files (x86)/Microsoft Visual Studio/2017/BuildTools/MSBuild/15.0/Bin'"
        - OPENSSL_VERSION: 1.0.2s
        - OPENSSL_URL: "'https://www.openssl.org/source/openssl-1.0.2s.tar.gz'"
        - OPENSSL_BIN_URL: "'https://indy.fulgan.com/SSL/openssl-1.0.2s-x64_86-win64.zip'"

before_install:
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then 
      sudo add-apt-repository -y ppa:$QT_PPA;
      sudo apt-get update -qq;
    fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then 
      brew update;
    fi
  - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
      export PLATFORM=${PLATFORM};
      export PATH=$PATH:${QT5_BASE_DIR}/bin:${MSBUILD_PATH}:${WIX_PATH};
      export PYTHON_PACKAGE=${PYTHON_PACKAGE};
      export CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE};
    fi

install:
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then 
      sudo apt-get install -y git cmake python2.7-dev python3-dev python3-pip libquazip-dev zlib1g-dev libssl-dev libffi-dev libpythonqt-dev libx11-dev mesa-common-dev libqt4-dev qtmobility-dev;
      sudo apt-get install -y qt${QT_VER}-meta-minimal qt${QT_VER}declarative qt${QT_VER}imageformats qt${QT_VER}multimedia qt${QT_VER}tools qt${QT_VER}svg qt${QT_VER}x11extras qt${QT_VER}xmlpatterns;
      sudo pip3 install -Iv setuptools==41.0.1;
      sudo pip3 install ssh2-python;
    fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then 
      brew install qt quazip;
      export PATH="$(brew --prefix qt)/bin:$PATH";
      sudo easy_install pip;
      sudo pip install ssh2-python;
    fi
  - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
      powershell Install-WindowsFeature Net-Framework-Core;
      cinst -y --no-progress ${PYTHON_PACKAGE};
      cinst -y --no-progress wixtoolset;
      export PATH="$(powershell -Command '("Process", "Machine" | % {
        [Environment]::GetEnvironmentVariable("PATH", $_) -Split ";" -Replace "\\$", ""
      } | Select -Unique | % { cygpath $_ }) -Join ":"')";
      echo "PATH=$PATH";
      tools/travis-install-qt-windows.sh;
      wget ${OPENSSL_URL};
      7z x openssl-${OPENSSL_VERSION}.tar.gz && 7z x openssl-${OPENSSL_VERSION}.tar;
      cd openssl-${OPENSSL_VERSION};
      wget ${OPENSSL_BIN_URL};
      unzip openssl-${OPENSSL_VERSION}*.zip -d bin;
      export OPENSSL_BASE_DIR=$(pwd);
      cd ..;
      wget http://www.zlib.net/zlib1211.zip;
      unzip zlib1211.zip;
      cd zlib-1.2.11;
      cmake . -DCMAKE_INSTALL_PREFIX=$(pwd) -DCMAKE_GENERATOR_PLATFORM=${PLATFORM};
      cmake --build . --config $CMAKE_BUILD_TYPE --target install;
      export ZLIB_BASE_DIR=$(pwd);
      cd ..;
      wget https://downloads.sourceforge.net/project/quazip/quazip/0.7.3/quazip-0.7.3.zip;
      unzip quazip-0.7.3.zip;
      cd quazip-0.7.3;
      sed -i '/ZLIB_LIBRARIES ""/d' ./CMakeLists.txt;
      cmake . -DCMAKE_INSTALL_PREFIX=$(pwd) -DCMAKE_GENERATOR_PLATFORM=${PLATFORM} -DCMAKE_PREFIX_PATH=${QT5_BASE_DIR}/lib/cmake -DZLIB_INCLUDE_DIRS=${ZLIB_BASE_DIR} -DZLIB_LIBRARIES=${ZLIB_BASE_DIR}/Release/zlib.lib;
      cmake --build . --config $CMAKE_BUILD_TYPE --target install;
      export QUAZIP_BASE_DIR=$(pwd);
      cd ..;
      pip install ssh2-python;
    fi

before_script:
  - mkdir build-qt5 build-qt4

script:
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then 
      cd build-qt4;
      cmake .. -DQT_USE_QT5=OFF -DPYTHON_USE_PYTHON3=OFF;
      make;
      cd ..;
      sudo apt-get purge -y libpythonqt-dev libpythonqt2.1 libquazip-dev libquazip0;
      source /opt/qt${QT_VER}/bin/qt${QT_VER}-env.sh;
    fi
  - cd build-qt5
  - git clone https://github.com/Orochimarufan/PythonQt
  - cd PythonQt
  - git checkout 18d4c24
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      cmake . -DCMAKE_INSTALL_PREFIX=/usr -DPythonQt_Python3=ON -DPYTHONQT_WITH_WEBKIT=OFF -DBUILD_SHARED_LIBS=ON;
      sudo cmake --build . --config $CMAKE_BUILD_TYPE --target install;
    elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      sudo cp -r /usr/include/python2.7 ./pythonincludes;
      sudo chmod 777 ./pythonincludes;
      curl https://trac.macports.org/raw-attachment/ticket/44288/patch-Include-pyport.h.diff | patch ./pythonincludes/pyport.h;
      cmake . -DCMAKE_PREFIX_PATH="$(brew --prefix qt)" -DPYTHON_INCLUDE_DIR=./pythonincludes -DPythonQt_Python3=OFF -DPYTHONQT_WITH_WEBKIT=OFF -DBUILD_SHARED_LIBS=ON;
      sudo cmake --build . --config $CMAKE_BUILD_TYPE --target install;
    elif [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
      cmake . -DCMAKE_INSTALL_PREFIX=$(pwd) -DCMAKE_GENERATOR_PLATFORM=${PLATFORM} -DPythonQt_Python3=ON -DPYTHONQT_WITH_WEBKIT=OFF -DBUILD_SHARED_LIBS=ON -DPYTHON_INCLUDE_DIR=${PYTHON_BASE_DIR}/include -DPYTHON_LIBRARY=${PYTHON_BASE_DIR}/libs/python37.lib;
      cmake --build . --config $CMAKE_BUILD_TYPE --target install;
    fi
  - export PYTHONQT_BASE_DIR=$(pwd)
  - cd ..
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      git clone https://github.com/stachenov/quazip;
      cd quazip;
      qmake PREFIX=/usr;
      sudo make install;
      cd ..;
      sudo ln -s /usr/lib/libQt5Python34_QtAll.so /usr/lib/libQtPython_QtAll.so;
      sudo ln -s /usr/lib/libQt5Python34.so /usr/lib/libQtPython.so;
      cmake .. -DCMAKE_INSTALL_PREFIX=/usr -DPYTHONQT_INCLUDE_DIR=/usr/include/Qt5Python34/PythonQt -DPYTHONQT_QTALL_INCLUDE_DIR=/usr/include/Qt5Python34/PythonQt;
      make;
    elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      cmake ..  -DCMAKE_PREFIX_PATH="$(brew --prefix qt)" -DPYTHON_USE_PYTHON3=OFF -DPYTHON_INCLUDE_DIR=./PythonQt/pythonincludes -DPYTHONQT_LIBRARY=/usr/local/lib/libQt5Python27.dylib -DPYTHONQT_INCLUDE_DIR=/usr/local/include/Qt5Python27/PythonQt -DPYTHONQT_QTALL_LIBRARY=/usr/local/lib/libQt5Python27_QtAll.dylib -DPYTHONQT_QTALL_INCLUDE_DIR=/usr/local/include/Qt5Python27/PythonQt;
      make;
    elif [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
      cmake .. -DCMAKE_INSTALL_PREFIX=$(pwd) -DCMAKE_GENERATOR_PLATFORM=${PLATFORM} -DCMAKE_PREFIX_PATH=${QT5_BASE_DIR}/lib/cmake -DZLIB_INCLUDE_DIRS=${ZLIB_BASE_DIR} -DQUAZIP_INCLUDE_DIR=${QUAZIP_BASE_DIR}/include/quazip5 -DQUAZIP_LIBRARY=${QUAZIP_BASE_DIR}/lib/quazip5.lib -DPYTHON_INCLUDE_DIR=${PYTHON_BASE_DIR}/include -DPYTHON_LIBRARY=${PYTHON_BASE_DIR}/libs/python37.lib -DPYTHONQT_INCLUDE_DIR=${PYTHONQT_BASE_DIR}/src -DPYTHONQT_LIBRARY=${PYTHONQT_BASE_DIR}/lib/Qt5Python37.lib -DPYTHONQT_QTALL_INCLUDE_DIR=${PYTHONQT_BASE_DIR}/extensions/PythonQt_QtAll -DPYTHONQT_QTALL_LIBRARY=${PYTHONQT_BASE_DIR}/lib/Qt5Python37_QtAll.lib -DOPENSSL_INCLUDE_DIR=${OPENSSL_BASE_DIR}/include -DOPENSSL_LIBRARIES=${OPENSSL_BASE_DIR}/bin;
      cmake --build . --config $CMAKE_BUILD_TYPE; 
    fi

after_success:
  - export VERSION=$TRAVIS_TAG
  - if [ -z "$VERSION" ]; then
      export VERSION=$(git rev-parse --short HEAD);
    fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      mkdir appdir;
      make install DESTDIR=appdir;
      sudo mkdir -p appdir/usr/lib/python3.4;
      sudo cp -r /usr/lib/python3.4/* appdir/usr/lib/python3.4/;
      sudo mkdir -p appdir/usr/local/lib/python3.4/dist-packages/ssh2;
      sudo cp -r /usr/local/lib/python3.4/dist-packages/ssh2/* appdir/usr/local/lib/python3.4/dist-packages/ssh2/;
      sudo chown -R $(id -nu) appdir;
      wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage";
      chmod a+x linuxdeployqt-continuous-x86_64.AppImage;
      wget -c -nv "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage";
      chmod a+x appimagetool-x86_64.AppImage;
      unset QTDIR; unset QT_PLUGIN_PATH ; unset LD_LIBRARY_PATH;
      ./linuxdeployqt-continuous-x86_64.AppImage appdir/usr/share/applications/*.desktop -bundle-non-qt-libs;
      unlink appdir/AppRun;
      cp ../res/screencloud.sh appdir/AppRun;
      rm -r appdir/usr/plugins/bearer;
      rm -r appdir/usr/plugins/mediaservice;
      rm -r appdir/usr/plugins/platforminputcontexts;
      rm -r appdir/usr/plugins/printsupport;
      rm -r appdir/usr/plugins/sqldrivers;
      rm -r appdir/usr/plugins/xcbglintegrations;
      ./appimagetool-x86_64.AppImage appdir;
      mkdir .snapcraft;
      mkdir snap;
      cp ../deploy/linux/snapcraft.yaml snap/snapcraft.yaml;
      openssl aes-256-cbc -K $encrypted_a38449865927_key -iv $encrypted_a38449865927_iv -in ../.snapcraft/travis_snapcraft.cfg -out .snapcraft/snapcraft.cfg -d;
      docker run -v $(pwd):$(pwd) -t ubuntu:18.04 sh -c "apt update -qq && apt install -y snapcraft && cd $(pwd) && snapcraft";
      export DEPLOYPATH=$(pwd);
      curl -F file=@$(ls | grep screencloud | grep .snap) https://file.io;
      curl -F file=@$(ls | grep ScreenCloud | grep .AppImage) https://file.io;
    elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      sudo make install;
      sudo cp -R /usr/local/lib/python2.7/site-packages/ssh2/. screencloud.app/Contents/Resources/modules/ssh2;
      sudo macdeployqt screencloud.app -verbose=3;
      sudo chown -R $(id -nu) screencloud.app;
      mkdir -p dmgdir/ScreenCloud.app;
      cp -r screencloud.app/* dmgdir/ScreenCloud.app/;
      ln -s /Applications dmgdir/Applications;
      hdiutil create -volname ScreenCloud-$VERSION -srcfolder dmgdir -ov -format UDZO ScreenCloud-$VERSION.dmg;
      export DEPLOYPATH=$(pwd);
      curl -F file=@$(ls | grep ScreenCloud | grep .dmg) https://file.io;
    elif [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
      cp -r ${PYTHON_BASE_DIR}/DLLs DLLs;
      cp -r ${PYTHON_BASE_DIR}/Lib/site-packages/ssh2 modules/ssh2;
      7z a -tzip -mx=9 python37.zip ${PYTHON_BASE_DIR}/Lib/*;
      cmake --build . --config $CMAKE_BUILD_TYPE --target install;
      export DEPLOYPATH=$(pwd);
      curl -F file=@$(ls | grep ScreenCloud | grep .msi) https://file.io;
    fi

deploy:
  provider: releases
  api_key:
    secure: xY0hOHsO6oztTs/fyKAl4FrA+6ylke3QXsAHzntIEHOt7sgVGQW/4QzJQYPwmAQAkVOssjZWdaJrFXQMFw+lYUpwZGSycPB+fDnosKYlxXFHG4rIliyG+az6ODzA0YeugFwlYAcHXx1qzBJ8gh3tHhB16ur7OQ62VdunCpG7NDtaINGMojzL4DmSfyiyOMPM4p6EcD+qaKd6dxBePXkmZ5J+YOvgfLcd1mJ94V7+WnQ66KltIaFZPewaansw/p6KAUxPXcTMyMepjcjQFQyucs4rN+9EmAaA5d0rzaucbTra1nJbJel0qWC+hcH8WF86ez8nTPFY1MGjRPZmfFGesvwUkzc3IH2w5j82BmP5x7IP+TZQ4qddM/eeWIX4WeTUKoVHHt/+iZNe6kZ7Qv8ZEzQS8/G0WHz0AyoWCKSztMFBs2XZvLPjEjhCr1HKH8ueX2zXFVRf9mpp23kjGyLzacTzSC+6xjrcp27s/fY+NH3kXw67c2tB815BqtYvWMoEZVNF1+7v0nbBOs6SaDAErLqRKOP4GKgEG+J3GvokuVmQpSzwk+v4EX4ixJm3pI6C+yFaDRc7CEtkXRFIPxesMeP2w8thIuWWNaNzRAKlxR4Dx9h4bLunsx5HDfwA9h0CszcOU2ewvrR60QExZ7fjTrIoqC/UWwjoCqFv+TlyGLU=
  file_glob: true
  file: $DEPLOYPATH/{screencloud,ScreenCloud}*.{dmg,snap,AppImage,msi}
  skip_cleanup: true
  on:
    repo: olav-st/screencloud
    tags: true
